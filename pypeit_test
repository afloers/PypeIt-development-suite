#!/usr/bin/env python3
#
# See top-level LICENSE.rst file for Copyright information
#
# -*- coding: utf-8 -*-

"""
This script runs the PypeIt development suite of tests
"""

import sys
import os
import glob
import subprocess

from IPython import embed

import numpy as np

def develop_setups():
    """
    Return the list of development setups.
    """
    return {'shane_kast_blue': ['452_3306_d57', '600_4310_d55', '830_3460_d46'],
            'shane_kast_red': ['600_7500_d55_ret', '600_7500_d57', '600_5000_d46', '1200_5000_d57'],
            'keck_deimos': ['600ZD_M_6500', '1200G_M_7750', '830G_LVM_8400', '830G_M_8100_26',
                            '830G_M_8500', '830G_L_8100'],
            'keck_kcwi': ['bh2_4200'],
            'keck_nires': ['NIRES'],
            'keck_nirspec': ['LOW_NIRSPEC-1'],
            'keck_mosfire': ['Y_long', 'J_multi', 'K_long'],
            'keck_lris_blue': ['multi_600_4000_d560', 'long_400_3400_d560', 'long_600_4000_d560',
                               'multi_300_5000_d680'],
            'keck_lris_red': ['long_600_7500_d560', 'multi_1200_9000_d680_1x2',
                              'multi_600_5000_d560', 'multi_1200_9000_d680',
                              'multi_400_8500_d560'],
            'vlt_xshooter': ['VIS_1x1', 'VIS_2x1', 'VIS_2x2', 'NIR'],
            'gemini_gnirs': ['32_SB_SXD', '10_LB_SXD'],
            'gemini_gmos': ['GS_HAM_R400_700', 'GS_HAM_R400_860'],
            'gemini_flamingos2': ['HK_HK', 'JH_JH'],
            'magellan_mage': ['1x1'],
            'magellan_fire': ['FIRE_Echelle', 'FIRE_Long'],
            'mdm_osmos': ['MDM4K'],
            'not_alfosc': ['grism4'],
            'vlt_fors2': ['300I'],
            'lbt_luci': ['LUCI-I', 'LUCI-II'],
            'mmt_binospec': ['Longslit_G600'],
            'mmt_mmirs': ['HK_zJ', 'J_zJ', 'K3000_Kspec'],
            }


def supported_instruments():
    return ['kast', 'deimos', 'kcwi', 'nires', 'nirspec', 'mosfire', 'lris', 'xshooter', 'gnirs', 'gmos',
            'flamingos2', 'mage', 'fire', 'luci', 'mdm', 'alfosc', 'fors2', 'binospec', 'mmirs']


def raw_data_dir():
    return os.path.join(os.environ['PYPEIT_DEV'], 'RAW_DATA')


def available_data():
    walk = os.walk(raw_data_dir())
    return next(walk)[1]


def get_logfile(rdxdir, instr, setup, ext):
    return os.path.join(rdxdir, '{0}_{1}.{2}.log'.format(instr.lower(), setup.lower(), ext))


def run_pypeit_setup(rawdir, rdxdir, instr, setup):
    """
    Run pypeit_setup.

    Returns:
        tuple: Returns the updated reduction directory, a True/False
        flag that the setup was successful, and the pypeit_file.  The
        latter is None if the setup wasn't successful.
    """
    # Use pypeit_setup to get the pypeit file
    logfile = get_logfile(rdxdir, instr, setup, 'test')
    with open(logfile, 'w') as f:
        command_line = ['pypeit_setup', '-r', rawdir, '-s', instr, '-c all', '-o',
                        '--output_path', rdxdir]
        print('Running command: {0}'.format(' '.join(command_line)), file=sys.stderr)
        print('Running pypeit_setup on {0}/{1}'.format(instr, setup), file=sys.stderr, end='')
        retval = subprocess.call(command_line, stderr=f, cwd=rdxdir)

    # Check for the pypeit file
    rdxdir = os.path.join(rdxdir, instr.lower()+'_A')
    pyp_file = glob.glob(os.path.join(rdxdir, '*_A.pypeit'))
    if len(pyp_file) != 1:
        print("\x1B[" + "1;31m" + " --- FAILED" + "\x1B[" + "0m", file=sys.stderr)
        print('Could not find expected pypeit file: {0}'.format(pyp_file), file=sys.stderr)
        return rdxdir, False, None

    pyp_file = os.path.split(pyp_file[0])[1]
    if retval == 0:
        print("\x1B[" + "1;32m" + " --- PASSED" + "\x1B[" + "0m", file=sys.stderr)
        subprocess.call(['tail', '-2', logfile])
        print("\n", file=sys.stderr)

    return rdxdir, True, pyp_file


def pypeit_file_name(instr, setup, std=False):
    base = '{0}_{1}'.format(instr.lower(), setup.lower())
    return '{0}_std.pypeit'.format(base) if std else '{0}.pypeit'.format(base)

def template_pypeit_file(dev_path, instr, setup, std=False):
    return os.path.join(dev_path, 'pypeit_files', pypeit_file_name(instr, setup, std=std))


def coadd2d_file_name(instr, setup):
    return '{0}_{1}.coadd2d'.format(instr.lower(), setup.lower())


def template_coadd2d_file(dev_path, instr, setup):
    return os.path.join(dev_path, 'coadd2d_files', coadd2d_file_name(instr, setup))


def fix_pypeit_file_directory(dev_path, raw_data, instr, setup, rdxdir, std=False):
    """
    Use template pypeit file to write the pypeit file relevant to the
    exising directory structure.

    Returns:
        str: The path to the corrected pypeit file.
    """
    # Read the pypeit file
    pyp_file = template_pypeit_file(dev_path, instr, setup, std=std)
    if not os.path.isfile(pyp_file):
        if std:
            return None
        raise FileNotFoundError('File does not exist: {0}'.format(pyp_file))
    with open(pyp_file, 'r') as infile:
        lines = infile.readlines()

    # Replace the default path with the local one
    for kk, iline in enumerate(lines):
        if 'data read' in iline:
            # JFH: This logic is a convoluted mess, and resulted in an infinite while loop. I hope this fixes it.
            old_path = lines[kk+1].strip().split(' ')[1] if 'path' in lines[kk+1] \
                            else lines[kk+1].strip()
            subdir = ''
            #while os.path.split(old_path)[1] != setup:
            #    subdir = os.path.join(os.path.split(old_path)[1], subdir)
            #    old_path = os.path.split(old_path)[0]
            newdpth = ' path ' if 'path' in lines[kk+1] else ' '
            newdpth += os.path.join(raw_data, instr, setup, subdir)
            newdpth += '\n'
            lines[kk+1] = newdpth
        elif 'flatfield' in iline and 'pixelflat_file' in lines[kk+1]:
            newcpth = os.path.join(dev_path, 'CALIBS', os.path.split(lines[kk+1])[1])
            lines[kk+1] = '        pixelflat_file = {0}'.format(newcpth)

    # Write the pypeit file
    pyp_file = os.path.join(rdxdir, pypeit_file_name(instr, setup, std=std))
    with open(pyp_file, 'w') as ofile:
        ofile.writelines(lines)
    return pyp_file


def run_pypeit(rdxdir, instr, setup, pyp_file, masters):
    """
    Run pypeit on the provided instrument and setup in the provided
    reduction directory.

    Returns:
        bool: True/False flag that the subprocess call was successful
    """
    logfile = get_logfile(rdxdir, instr, setup, 'test')
    with open(logfile, 'w') as f:
        print('Directory: {0}'.format(rdxdir))
        command_line = ['run_pypeit', pyp_file, '-o']
        if masters:
            command_line += ['-m']
        print('Command line: {0}'.format(' '.join(command_line)))
        print('Running pypeit on {0}/{1} ({2} masters) '.format(instr, setup,
                'reuses' if masters else 'ignores'), file=sys.stderr, end='')
        retval = subprocess.call(command_line, stderr=f, cwd=rdxdir)
        report_test(retval)
        subprocess.call(['tail', '-2', logfile])
        print("\n", file=sys.stderr)
    return retval == 0


def run_sensfunc(rdxdir, instr, setup, std_file, sens_file=None):
    if not os.path.isfile(std_file):
        print('File does not exist!: {0}'.format(std_file))
        return False
    logfile = get_logfile(rdxdir, instr, setup, 'test_sens')
    #fdir = os.path.join(rdxdir, 'Science')
    with open(logfile, 'w') as f:
        #print('Directory: {0}'.format(fdir))
        print('Directory: {0}'.format(rdxdir))
        command_line = ['pypeit_sensfunc', std_file]
        if sens_file is not None:
            command_line += ['-s', sens_file]
        print('Command line: {0}'.format(' '.join(command_line)))
        print('Running pypeit_sensfunc on {0}/{1}'.format(instr, setup), file=sys.stderr, end='')
        retval = subprocess.call(command_line, stderr=f, cwd=rdxdir)
        report_test(retval, type='SENSFUNC')
        subprocess.call(['tail', '-3', logfile])
        print("\n", file=sys.stderr)
    return retval == 0

def run_flux_setup(rdxdir, instr, setup):
    """
    Test telluric correction with pisco GNIRS data
    """
    logfile = get_logfile(rdxdir, instr, setup, 'test_flux_setup')
    with open(logfile, 'w') as f:
        print('Directory: {0}'.format(rdxdir))
        command_line = ['pypeit_flux_setup', os.path.join(rdxdir,'Science')]
        print('Command line: {0}'.format(' '.join(command_line)))
        print('Running pypeit_flux_setup on {0}/{1}'.format(instr, setup), file=sys.stderr,
              end='')
        retval = subprocess.call(command_line, stderr=f, cwd=rdxdir)
        report_test(retval, type='FLUX_SETUP')
        subprocess.call(['tail', '-3', logfile])
        print("\n", file=sys.stderr)
    return retval ==0

def run_flux_calib(dev_path, rdxdir, instr, setup):
    logfile = get_logfile(rdxdir, instr, setup, 'test_flux')
    flux_file = os.path.join(dev_path, 'fluxing_files',
                             '{0}_{1}.flux'.format(instr.lower(), setup.lower()))
#    fdir = os.path.join(rdxdir, 'Science')
    with open(logfile, 'w') as f:
        print('Directory: {0}'.format(rdxdir))
        command_line = ['pypeit_flux_calib', flux_file]
        print('Command line: {0}'.format(' '.join(command_line)))
        print('Running pypeit_flux on {0}/{1}'.format(instr, setup), file=sys.stderr, end='')
        retval = subprocess.call(command_line, stderr=f, cwd=rdxdir)
        report_test(retval, type='FLUXING')
        subprocess.call(['tail', '-3', logfile])
        print("\n", file=sys.stderr)
    return retval == 0


def run_coadd1d(dev_path, rdxdir, instr, setup):
    logfile = get_logfile(rdxdir, instr, setup, 'test_1dcoadd')
    coadd_file = os.path.join(dev_path, 'coadd1d_files',
                              '{0}_{1}.coadd1d'.format(instr.lower(), setup.lower()))
    with open(logfile, 'w') as f:
        print('Directory: {0}'.format(rdxdir))
        command_line = ['pypeit_coadd_1dspec', coadd_file]
        print('Command line: {0}'.format(' '.join(command_line)))
        print('Running pypeit_coadd_1dspec on {0}/{1}'.format(instr, setup), file=sys.stderr,
              end='')
        retval = subprocess.call(command_line, stderr=f, cwd=rdxdir)
        report_test(retval, type='COADD1D')
        subprocess.call(['tail', '-3', logfile])
        print("\n", file=sys.stderr)
    return retval == 0


def run_coadd2d(rdxdir, instr, setup, coadd_file=None, obj=None):
    if coadd_file is None and obj is None:
        raise ValueError('Must provided coadd2d file or object name.')
    logfile = get_logfile(rdxdir, instr, setup, 'test_2dcoadd')
    with open(logfile, 'w') as f:
        print('Directory: {0}'.format(rdxdir))
        command_line = ['pypeit_coadd_2dspec']
        command_line += ['--obj', obj] if coadd_file is None else ['--file', coadd_file]
        print('Command line: {0}'.format(' '.join(command_line)))
        print('Running pypeit_coadd_2dspec on {0}/{1}'.format(instr, setup), file=sys.stderr,
              end='')
        retval = subprocess.call(command_line, stderr=f, cwd=rdxdir)
        report_test(retval, type='COADD2D')
        subprocess.call(['tail', '-3', logfile])
        print("\n", file=sys.stderr)
    return retval == 0

def run_tellfit(rdxdir, instr, setup, coadd_file, redshift, objmodel):
    """
    Test telluric correction with pisco GNIRS data
    """
    logfile = get_logfile(rdxdir, instr, setup, 'test_tellfit')
    with open(logfile, 'w') as f:
        print('Directory: {0}'.format(rdxdir))
        command_line = ['pypeit_tellfit', os.path.join(rdxdir,coadd_file)]
        command_line += ['--redshift', '{:}'.format(redshift)]
        command_line += ['--objmodel', objmodel]
        print('Command line: {0}'.format(' '.join(command_line)))
        print('Running pypeit_tellfit on {0}/{1}'.format(instr, setup), file=sys.stderr,
              end='')
        retval = subprocess.call(command_line, stderr=f, cwd=rdxdir)
        report_test(retval, type='TELLFIT')
        subprocess.call(['tail', '-3', logfile])
        print("\n", file=sys.stderr)
    return retval == 0


def run_ql(rawdir, rdxdir, instr, setup, files, mos=False):
    qldir = os.path.join(rdxdir, 'QL')
    if not os.path.isdir(qldir):
        os.mkdir(qldir)
    logfile = get_logfile(qldir, instr, setup, 'test_ql')
    with open(logfile, 'w') as f:
        print('Directory: {0}'.format(qldir))
        command_line = ['pypeit_ql_mos', instr] if mos else ['pypeit_ql_keck_nires']
        command_line += [rawdir] + files
        # TODO: Make sure files is a list
        print('Command line: {0}'.format(' '.join(command_line)))
        print('Running pypeit_ql_mos on {0}'.format(instr), file=sys.stderr, end='')
        retval = subprocess.call(command_line, stderr=f, cwd=qldir)
        report_test(retval, type='QL')
        subprocess.call(['tail', '-3', logfile])
        print("\n", file=sys.stderr)
    return retval == 0


def report_test(retval, type=None):
    fstr = '' if type is None else type +  ' '
    if retval == 0:
        print("\x1B[" + "1;32m" + "{} --- PASSED".format(fstr) + "\x1B[" + "0m", file=sys.stderr)
    else:
        print("\x1B[" + "1;31m" + "{} --- FAILED".format(fstr) + "\x1B[" + "0m", file=sys.stderr)


def parser(options=None):
    import argparse

    dirs = available_data()
    all_tests = np.unique([ [d.split('_')[0], d.split('_')[1]] for d in dirs ])

    parser = argparse.ArgumentParser(formatter_class=argparse.ArgumentDefaultsHelpFormatter,
                                     description='Run pypeit tests on a set of instruments.  '
                                                 'Typical call for testing pypeit when developing '
                                                 'new code is `./pypeit_test develop`.  Execution '
                                                 'requires you to have a PYPEIT_DEV environmental '
                                                 'variable, pointing to the top-level directory '
                                                 'of the dev-suite repository (typically the '
                                                 'location of this script).  Raw data for testing '
                                                 'is expected to be at ${PYPEIT_DEV}/RAW_DATA.  '
                                                 'To run all tests for the supported instruments, '
                                                 'use \'develop\'.  To only run the basic '
                                                 'reductions, use \'reduce\'.  To only run the '
                                                 'tests that use the results of the reductions, '
                                                 'use \'afterburn\'.  To run all possible tests '
                                                 '(beware!), use \'all\'.')

    parser.add_argument('tests', type=str, default=None,
                        help='Instrument or test to run.  For instrument-specific tests, you '
                             'can provide the telescope or the spectrograph, but beware of '
                             'non-unique matches.  E.g. \'mage\' selects all the magellan '
                             'instruments, not just \'magellan_mage\'.  Options include: '
                             'develop, reduce, afterburn, all, ql, {0}'.format(', '.join(all_tests)))
    parser.add_argument('-o', '--outputdir', type=str, default='REDUX_OUT',
                        help='Output folder.')
    # TODO: Why is this an option?
    parser.add_argument('-i', '--instrument', type=str, help="Restrict to input instrument")
    parser.add_argument('-s', '--setup', type=str, help="Single out a setup to run")
    parser.add_argument('--debug', default=False, action='store_true',
                        help='Debug using only blue setups')
    parser.add_argument('-p', '--prep_only', default=False, action='store_true',
                        help='Only prepare to execute run_pypeit, but do not actually run it.')
    parser.add_argument('-m', '--masters', default=False, action='store_true',
                        help='run pypeit using any existing masters')

    return parser.parse_args() if options is None else parser.parse_args(options)


def main():

    pargs = parser()

    # TODO: Once we're satisfied that an instrument passes, add it to
    # this list and add a series of setups to the development set!  Runs
    # of PypeIt must pass for all setups in the development list.  See
    # `develop_setups`.

    dev_path = os.getenv('PYPEIT_DEV')
    raw_data = raw_data_dir()
    if not os.path.isdir(raw_data):
        raise NotADirectoryError('No directory: {0}'.format(raw_data))

    all_instruments = available_data()
    flg_after = False
    flg_ql = False

    # Development instruments (in returned dictonary keys) and setups
    devsetups = develop_setups()

    # Setup
    unsupported = []
    if pargs.tests == 'all':
        instruments = np.array([item for item in all_instruments
                                        for inst in supported_instruments()
                                            if inst.lower() in item.lower()])
    elif pargs.tests in ['develop', 'reduce', 'afterburn', 'ql']:
        instruments = np.array(list(devsetups.keys())) if pargs.instrument is None \
                        else np.array([pargs.instrument])
        if pargs.tests == 'afterburn':
            # Only do the flux-calibration and coadding tests
            flg_after = True
        elif pargs.tests == 'ql':
            flg_ql = True
    else:
        instruments = np.array([item for item in all_instruments 
                                    if pargs.tests.lower() in item.lower()])
        unsupported = [item for item in instruments 
                            if not np.any([inst.lower() in item.lower()
                                for inst in supported_instruments()]) ]

    # Check that instruments is not blank
    if len(instruments) == 0:
        print("\x1B[" + "1;31m" + "\nERROR - " + "\x1B[" + "0m" +
              "Invalid test selected: {0:s}\n\n".format(pargs.tests) +
              "Consult the help (pypeit_test -h) or select one of the " +
              "available RAW_DATA directories: {0}".format(', '.join(all_instruments)))
        return 1

    if len(unsupported) > 0:
        print("\x1B[" + "1;33m" + "\nWARNING - " + "\x1B[" + "0m" +
              "The following tests have not been validated and may not pass: {0}\n\n".format(
              unsupported))

    if not os.path.exists(pargs.outputdir):
        os.mkdir(pargs.outputdir)
    outputdir = os.path.abspath(pargs.outputdir)

    # Do DEIMOS last:
    # TODO: Do we still care? It hasn't been last for a long time...
    if 'keck_deimos' in instruments:
        instruments = np.append(np.delete(instruments, np.argwhere(instruments=='keck_deimos')),
                                ['keck_deimos'])

    # Report
    print('Running tests on the following instruments:')
    for instr in instruments:
        print('    {0}'.format(instr))
    print('')

    #---------------------------------------------------------------------------
    # Check all the data and relevant files exists before starting!
    # TODO: Do this for "all", as well?
    if pargs.tests in ['develop', 'reduce', 'afterburn']:
        unsupported = []
        missing_data = []
        missing_pypfiles = []
        for instr in instruments:
            # Only do blue instruments
            if pargs.debug and 'blue' not in instr:
                continue
            if instr not in devsetups.keys():
                # TODO: We should never get here, right?
                unsupported += [ instr ]

            # Setups
            setups = next(os.walk(os.path.join(raw_data, instr)))[1]

            # Check all data before starting
            for setup in devsetups[instr]:
                if setup not in setups:
                    missing_data += [ '{0}/{1}'.format(instr, setup) ]

                if instr == 'shane_kast_blue' and '600' in setup:
                    # pypeit file is created by pypeit_setup
                    continue

                pyp_file = template_pypeit_file(dev_path, instr, setup)
                if not os.path.isfile(pyp_file):
                    missing_pypfiles += [pyp_file]

        if len(unsupported) > 0:
            raise ValueError('Unsupported instruments: {0}'.format(', '.join(unsupported)))
        if len(missing_data) > 0:
            raise ValueError('Missing the following test data: {0}'.format(
                                ', '.join(missing_data)))
        if len(missing_pypfiles) > 0:
            raise ValueError('Missing the following template pypeit files:\n    {0}'.format(
                                '\n    '.join(missing_pypfiles)))
    #---------------------------------------------------------------------------


    #---------------------------------------------------------------------------
    # Loop on instruments
    npass = 0
    ntest = 0
    
    failed = []

    for instr in instruments:
        # Only do blue instruments
        if pargs.debug and 'blue' not in instr:
            continue

        # Setups
        setups = next(os.walk(os.path.join(raw_data, instr)))[1]
        if pargs.setup is not None and pargs.setup not in setups:
            # No setups selected
            continue
        # Limit to a single setup
        if pargs.setup is not None:
            setups = [ pargs.setup ]
        # Limit to development setups
        if pargs.tests in ['develop', 'reduce', 'afterburn']:
            setups = devsetups[instr]

        # Report
        print('Reducing data from {0} for the following setups:'.format(instr))
        for setup in setups:
            print('    {0}'.format(setup))
        print('')

        for setup in setups:
            # Directory with raw data
            rawdir = os.path.join(raw_data, instr, setup)

            # Directory for reduced data
            rdxdir = os.path.join(outputdir, instr, setup)
            if not os.path.exists(rdxdir):
                # Make the directory
                os.makedirs(rdxdir)

            # Report
            print('Directories:')
            print('         Raw data: {0}'.format(rawdir))
            print('    PypeIt output: {0}'.format(rdxdir))
            print('')

            # Begin with optimism
            passed = True

            # TODO: By default search for the appropriate pypeit file
            # and run pypeit_setup if it doesn't exist
            
            # TODO: Include option that forces the tests to run
            # pypeit_setup

            if instr == 'shane_kast_blue' and '600' in setup:
                # Use pypeit_setup to generate the pypeit file
                ntest += 1
                rdxdir, passed, pyp_file = run_pypeit_setup(rawdir, rdxdir, instr, setup)
                if passed:
                    npass += 1
                else:
                    failed += [ 'pypeit_setup: {0}/{1}'.format(instr, setup) ]
                std_pyp_file = None
            else:
                # Use pre-made PypeIt file
                pyp_file = fix_pypeit_file_directory(dev_path, raw_data, instr, setup, rdxdir)
                # Also try to find and fix pypeit files for
                # spectroscopic standards.  This is a KLUDGE for
                # gemini_gmos
                std_pyp_file = fix_pypeit_file_directory(dev_path, raw_data, instr, setup, rdxdir,
                                                         std=True)

            if not passed:
                print('Cannot continue with test for {0}/{1}.  Moving on.'.format(instr, setup))
                continue

            # Only want to prep
            if pargs.prep_only:
                continue

            pyp_file = os.path.split(pyp_file)[1]
            # Run pypeit
            if passed and not (flg_after or flg_ql):
                ntest += 1
                passed = run_pypeit(rdxdir, instr, setup, pyp_file, pargs.masters)
                if passed:
                    npass += 1
                else:
                    failed += [ 'run_pypeit: {0}/{1}'.format(instr, setup) ]

            # Run pypeit on any standards, if they exist
            if passed and std_pyp_file is not None and not (flg_after or flg_ql):
                ntest += 1
                passed = run_pypeit(rdxdir, instr, setup, std_pyp_file, pargs.masters)
                if passed:
                    npass += 1
                else:
                    failed += [ 'run_pypeit std: {0}/{1}'.format(instr, setup) ]

            # Try re-running keck_lris_red setups with masters
            if passed and not (flg_after or flg_ql) and instr == 'keck_lris_red' and not flg_ql:
                ntest += 1
                passed = run_pypeit(rdxdir, instr, setup, pyp_file, True)
                if passed:
                    npass += 1
                else:
                    failed += [ 'run_pypeit (with masters): {0}/{1}'.format(instr, setup) ]

            if pargs.tests == 'reduce':
                # Skip the afterburner tests
                continue

            # ----------------------------------------------------------
            # ----------------------------------------------------------
            # SensFunc tests
            # ----------------------------------------------------------
            # UVIS algorithm without .sens file
            if passed and instr == 'shane_kast_blue' and '600' in setup and not flg_ql:
                ntest += 1
                # TODO: Instead check for file with standard star in the
                # file name?
                std_file = os.path.join(rdxdir, 'Science',
                                        'spec1d_b24-Feige66_KASTb_2015May20T041246.960.fits')
                if os.path.isfile(std_file) \
                        and run_sensfunc(rdxdir, instr, setup, std_file):
                    npass += 1
                else:
                    failed += [ 'pypeit_sensfunc: {0}/{1}'.format(instr, setup) ]

            # IR algorithm with .sens file
            if passed and instr == 'gemini_gnirs' and setup == '32_SB_SXD' and not flg_ql:
                ntest += 1
                std_file = os.path.join(rdxdir, 'Science',
                                'spec1d_cN20170331S0206-HIP62745_GNIRS_2017Mar31T083351.681.fits')
                sens_file = os.path.join(dev_path, 'sensfunc_files', 'gemini_gnirs_32_sb_sxd.sens')
                if run_sensfunc(rdxdir, instr, setup, std_file, sens_file=sens_file):
                    npass += 1
                else:
                    failed += [ 'pypeit_sensfunc: {0}/{1}'.format(instr, setup) ]

            # IR algorithm, multi-slit, without .sens file
            if passed and instr == 'gemini_gmos' and setup == 'GS_HAM_R400_860' and not flg_ql:
                ntest += 1
                std_file = os.path.join(rdxdir, 'Science',
                                'spec1d_S20181219S0316-GD71_GMOS-S_1864May27T230832.356.fits')
                if run_sensfunc(rdxdir, instr, setup, std_file):
                    npass += 1
                else:
                    failed += [ 'pypeit_sensfunc: {0}/{1}'.format(instr, setup) ]
            # ----------------------------------------------------------

            # ----------------------------------------------------------
            # ----------------------------------------------------------
            # fluxing/coadd1d/tellfit Pypeit files setup tests
            # ----------------------------------------------------------
            flux_setup_pairs = {'shane_kast_blue': '600_4310_d55',  # long-slit
                                'gemini_gnirs': '32_SB_SXD',        # echelle
                                'gemini_gmos': 'GS_HAM_R400_860'}   # multi-slit
            if passed and any([instr == key and setup == flux_setup_pairs[key]
                                for key in flux_setup_pairs.keys()]) and not flg_ql:
                ntest += 1
                if run_flux_setup(rdxdir, instr, setup):
                    npass += 1
                else:
                    failed += [ 'pypeit_flux_setup: {0}/{1}'.format(instr, setup) ]
            # ----------------------------------------------------------


            # ----------------------------------------------------------
            # ----------------------------------------------------------
            # Flux calibration tests
            # ----------------------------------------------------------
            flux_calib_pairs = {'shane_kast_blue': '600_4310_d55',  # long-slit
                                'gemini_gnirs': '32_SB_SXD',        # echelle
                                'gemini_gmos': 'GS_HAM_R400_860'}   # multi-slit
            if passed and any([instr == key and setup == flux_calib_pairs[key] 
                                for key in flux_calib_pairs.keys()]) and not flg_ql:
                ntest += 1
                if run_flux_calib(dev_path, rdxdir, instr, setup):
                    npass += 1
                else:
                    failed += [ 'pypeit_flux_spec: {0}/{1}'.format(instr, setup) ]

             # TODO: Does a sens file exist for NIRES?
#            # Sensfunc testing, IR algorithm with .sens file
#            # JFH TODO add a NIRSPEC dataset with a standard
#            if passed and instr == 'keck_nires':
#                ntest += 1
#                if run_flux_calib(dev_path, rdxdir, instr, setup):
#                    npass += 1
#                else:
#                    failed += [ 'pypeit_flux_spec: {0}/{1}'.format(instr, setup) ]
            # ----------------------------------------------------------

            # ----------------------------------------------------------
            # ----------------------------------------------------------
            # 1D coadding tests
            # ----------------------------------------------------------
            coadd_1d_pairs = {'shane_kast_blue': '600_4310_d55',  # long-slit
                              'gemini_gnirs': '32_SB_SXD',        # echelle
                              'gemini_gmos': 'GS_HAM_R400_860'}   # multi-slit
            if passed and any([instr == key and setup == coadd_1d_pairs[key] 
                                for key in coadd_1d_pairs.keys()]) and not flg_ql:
                ntest += 1
                if run_coadd1d(dev_path, rdxdir, instr, setup):
                    npass += 1
                else:
                    failed += [ 'pypeit_coadd_1dspec: {0}/{1}'.format(instr, setup) ]
            # ----------------------------------------------------------


            # ----------------------------------------------------------
            # ----------------------------------------------------------
            # 2D coadding tests
            # ----------------------------------------------------------
            # Echelle
            if passed and instr == 'gemini_gnirs' and setup == '32_SB_SXD' and not flg_ql:
                ntest += 1
                if run_coadd2d(rdxdir, instr, setup, obj='pisco'):
                    npass += 1
                else:
                    failed += [ 'pypeit_coadd_2dspec: {0}/{1}'.format(instr, setup) ]

            # MultiSlit
            if passed and instr == 'keck_lris_blue' and setup == 'multi_600_4000_d560' and not flg_ql:
                ntest += 1
                if run_coadd2d(rdxdir, instr, setup,
                               coadd_file=template_coadd2d_file(dev_path, instr, setup)):
                    npass += 1
                else:
                    failed += [ 'pypeit_coadd_2dspec: {0}/{1}'.format(instr, setup) ]
            # ----------------------------------------------------------


            # ----------------------------------------------------------
            # ----------------------------------------------------------
            # Telluric tests
            # ----------------------------------------------------------
            # Echelle
            if passed and instr == 'gemini_gnirs' and setup == '32_SB_SXD' and not flg_ql:
                ntest += 1
                if run_tellfit(rdxdir, instr, setup, coadd_file='pisco_coadd.fits', redshift=7.52, objmodel='qso'):
                    npass += 1
                else:
                    failed += [ 'pypeit_tellfit: {0}/{1}'.format(instr, setup) ]

            # MultiSlit
            #ToDo: Add a multislit test.

            # ----------------------------------------------------------
            # ----------------------------------------------------------
            # Quick-look tests
            # ----------------------------------------------------------
            # MOS
            if instr == 'shane_kast_blue' and '600' in setup:
                ntest += 1
                if run_ql(rawdir, rdxdir, instr, setup,
                          ['b1.fits.gz', 'b10.fits.gz', 'b27.fits.gz'], mos=True):
                    npass += 1
                else:
                    failed += [ 'pypeit_ql: {0}/{1}'.format(instr, setup) ]

            # NIRES
            if instr.lower() == 'keck_nires' and setup == 'NIRES':
                ntest += 1
                if run_ql(rawdir, rdxdir, instr, setup,
                          ['s190519_0067.fits', 's190519_0068.fits']):
                    npass += 1
                else:
                    failed += [ 'pypeit_ql: {0}/{1}'.format(instr, setup) ]
            # ----------------------------------------------------------

    #---------------------------------------------------------------------------

    if npass == ntest:
        print("\n" + "\x1B[" + "1;32m" +
              "--- PYPEIT DEVELOPMENT SUITE PASSED {0}/{1} TESTS (Masters {2}) ---".format(
                npass, ntest, 'reused' if pargs.masters else 'ignored')
              + "\x1B[" + "0m" + "\r", file=sys.stderr)
    else:
        print("\n" + "\x1B[" + "1;31m" +
              "--- PYPEIT DEVELOPMENT SUITE FAILED {0}/{1} TESTS (Masters {2}) ---".format(
                ntest-npass, ntest, 'reused' if pargs.masters else 'ignored')
              + "\x1B[" + "0m" + "\r", file=sys.stderr)
        print('Failed tests:')
        for fail in failed:
            print('    {0}'.format(fail))


if __name__ == '__main__':
    # Check for pypeit executable
    if not any([os.access(os.path.join(path, 'run_pypeit'), os.X_OK)
                for path in os.environ["PATH"].split(os.pathsep)]):
        raise RuntimeError("You need to install run_pypeit in your PATH")

    # Check for PYPEIT_DEV
    if 'PYPEIT_DEV' not in os.environ:
        raise EnvironmentError('Enviroment must include PYPEIT_DEV, which points to the '
                               'top-level directory with the dev-suite raw data.')

    # Giddy up
    main()


